// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: identity/role.proto

package identity

import (
	fmt "fmt"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for RoleService service

func NewRoleServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "RoleService.Create",
			Path:    []string{"/identity/role"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
		{
			Name:    "RoleService.Read",
			Path:    []string{"/identity/role/{id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "RoleService.Update",
			Path:    []string{"/identity/role/{id}"},
			Method:  []string{"PUT"},
			Handler: "rpc",
		},
		{
			Name:    "RoleService.Delete",
			Path:    []string{"/identity/role/{id}"},
			Method:  []string{"DELETE"},
			Handler: "rpc",
		},
		{
			Name:    "RoleService.ReadTree",
			Path:    []string{"/identity/role:tree"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "RoleService.GrantPermissions",
			Path:    []string{"/identity/role/permissions"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
		{
			Name:    "RoleService.GetPermissions",
			Path:    []string{"/identity/role/{id}/permissions"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
	}
}

// Client API for RoleService service

type RoleService interface {
	Create(ctx context.Context, in *RoleCreateRequest, opts ...client.CallOption) (*RoleCreateResponse, error)
	Read(ctx context.Context, in *RoleReadRequest, opts ...client.CallOption) (*RoleReadResponse, error)
	Update(ctx context.Context, in *RoleUpdateRequest, opts ...client.CallOption) (*RoleUpdateResponse, error)
	Delete(ctx context.Context, in *RoleDeleteRequest, opts ...client.CallOption) (*RoleDeleteResponse, error)
	ReadTree(ctx context.Context, in *RoleTreeRequest, opts ...client.CallOption) (*RoleTreeResponse, error)
	GrantPermissions(ctx context.Context, in *RoleGrantPermissionRequest, opts ...client.CallOption) (*RoleGrantPermissionResponse, error)
	GetPermissions(ctx context.Context, in *GetPermissionRequest, opts ...client.CallOption) (*GetPermissionResponse, error)
}

type roleService struct {
	c    client.Client
	name string
}

func NewRoleService(name string, c client.Client) RoleService {
	return &roleService{
		c:    c,
		name: name,
	}
}

func (c *roleService) Create(ctx context.Context, in *RoleCreateRequest, opts ...client.CallOption) (*RoleCreateResponse, error) {
	req := c.c.NewRequest(c.name, "RoleService.Create", in)
	out := new(RoleCreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) Read(ctx context.Context, in *RoleReadRequest, opts ...client.CallOption) (*RoleReadResponse, error) {
	req := c.c.NewRequest(c.name, "RoleService.Read", in)
	out := new(RoleReadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) Update(ctx context.Context, in *RoleUpdateRequest, opts ...client.CallOption) (*RoleUpdateResponse, error) {
	req := c.c.NewRequest(c.name, "RoleService.Update", in)
	out := new(RoleUpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) Delete(ctx context.Context, in *RoleDeleteRequest, opts ...client.CallOption) (*RoleDeleteResponse, error) {
	req := c.c.NewRequest(c.name, "RoleService.Delete", in)
	out := new(RoleDeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) ReadTree(ctx context.Context, in *RoleTreeRequest, opts ...client.CallOption) (*RoleTreeResponse, error) {
	req := c.c.NewRequest(c.name, "RoleService.ReadTree", in)
	out := new(RoleTreeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) GrantPermissions(ctx context.Context, in *RoleGrantPermissionRequest, opts ...client.CallOption) (*RoleGrantPermissionResponse, error) {
	req := c.c.NewRequest(c.name, "RoleService.GrantPermissions", in)
	out := new(RoleGrantPermissionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) GetPermissions(ctx context.Context, in *GetPermissionRequest, opts ...client.CallOption) (*GetPermissionResponse, error) {
	req := c.c.NewRequest(c.name, "RoleService.GetPermissions", in)
	out := new(GetPermissionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RoleService service

type RoleServiceHandler interface {
	Create(context.Context, *RoleCreateRequest, *RoleCreateResponse) error
	Read(context.Context, *RoleReadRequest, *RoleReadResponse) error
	Update(context.Context, *RoleUpdateRequest, *RoleUpdateResponse) error
	Delete(context.Context, *RoleDeleteRequest, *RoleDeleteResponse) error
	ReadTree(context.Context, *RoleTreeRequest, *RoleTreeResponse) error
	GrantPermissions(context.Context, *RoleGrantPermissionRequest, *RoleGrantPermissionResponse) error
	GetPermissions(context.Context, *GetPermissionRequest, *GetPermissionResponse) error
}

func MicroRegisterRoleServiceHandler(s server.Server, hdlr RoleServiceHandler, opts ...server.HandlerOption) error {
	type roleService interface {
		Create(ctx context.Context, in *RoleCreateRequest, out *RoleCreateResponse) error
		Read(ctx context.Context, in *RoleReadRequest, out *RoleReadResponse) error
		Update(ctx context.Context, in *RoleUpdateRequest, out *RoleUpdateResponse) error
		Delete(ctx context.Context, in *RoleDeleteRequest, out *RoleDeleteResponse) error
		ReadTree(ctx context.Context, in *RoleTreeRequest, out *RoleTreeResponse) error
		GrantPermissions(ctx context.Context, in *RoleGrantPermissionRequest, out *RoleGrantPermissionResponse) error
		GetPermissions(ctx context.Context, in *GetPermissionRequest, out *GetPermissionResponse) error
	}
	type RoleService struct {
		roleService
	}
	h := &roleServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "RoleService.Create",
		Path:    []string{"/identity/role"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "RoleService.Read",
		Path:    []string{"/identity/role/{id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "RoleService.Update",
		Path:    []string{"/identity/role/{id}"},
		Method:  []string{"PUT"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "RoleService.Delete",
		Path:    []string{"/identity/role/{id}"},
		Method:  []string{"DELETE"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "RoleService.ReadTree",
		Path:    []string{"/identity/role:tree"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "RoleService.GrantPermissions",
		Path:    []string{"/identity/role/permissions"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "RoleService.GetPermissions",
		Path:    []string{"/identity/role/{id}/permissions"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&RoleService{h}, opts...))
}

type roleServiceHandler struct {
	RoleServiceHandler
}

func (h *roleServiceHandler) Create(ctx context.Context, in *RoleCreateRequest, out *RoleCreateResponse) error {
	return h.RoleServiceHandler.Create(ctx, in, out)
}

func (h *roleServiceHandler) Read(ctx context.Context, in *RoleReadRequest, out *RoleReadResponse) error {
	return h.RoleServiceHandler.Read(ctx, in, out)
}

func (h *roleServiceHandler) Update(ctx context.Context, in *RoleUpdateRequest, out *RoleUpdateResponse) error {
	return h.RoleServiceHandler.Update(ctx, in, out)
}

func (h *roleServiceHandler) Delete(ctx context.Context, in *RoleDeleteRequest, out *RoleDeleteResponse) error {
	return h.RoleServiceHandler.Delete(ctx, in, out)
}

func (h *roleServiceHandler) ReadTree(ctx context.Context, in *RoleTreeRequest, out *RoleTreeResponse) error {
	return h.RoleServiceHandler.ReadTree(ctx, in, out)
}

func (h *roleServiceHandler) GrantPermissions(ctx context.Context, in *RoleGrantPermissionRequest, out *RoleGrantPermissionResponse) error {
	return h.RoleServiceHandler.GrantPermissions(ctx, in, out)
}

func (h *roleServiceHandler) GetPermissions(ctx context.Context, in *GetPermissionRequest, out *GetPermissionResponse) error {
	return h.RoleServiceHandler.GetPermissions(ctx, in, out)
}
