// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: identity/group.proto

package identity

import (
	fmt "fmt"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	proto "google.golang.org/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for GroupService service

func NewGroupServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "GroupService.Create",
			Path:    []string{"/identity/group"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
		{
			Name:    "GroupService.Read",
			Path:    []string{"/identity/group/{id}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "GroupService.Update",
			Path:    []string{"/identity/group/{id}"},
			Method:  []string{"PUT"},
			Handler: "rpc",
		},
		{
			Name:    "GroupService.Delete",
			Path:    []string{"/identity/group/{id}"},
			Method:  []string{"DELETE"},
			Handler: "rpc",
		},
		{
			Name:    "GroupService.List",
			Path:    []string{"/identity/group:tree"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "GroupService.Roles",
			Path:    []string{"/identity/group/{id}/roles"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "GroupService.GrantRoles",
			Path:    []string{"/identity/group/{id}/roles"},
			Method:  []string{"POST"},
			Handler: "rpc",
		},
	}
}

// Client API for GroupService service

type GroupService interface {
	Create(ctx context.Context, in *GroupCreateRequest, opts ...client.CallOption) (*GroupCreateResponse, error)
	Read(ctx context.Context, in *GroupReadRequest, opts ...client.CallOption) (*GroupReadResponse, error)
	Update(ctx context.Context, in *GroupUpdateRequest, opts ...client.CallOption) (*GroupUpdateResponse, error)
	Delete(ctx context.Context, in *GroupDeleteRequest, opts ...client.CallOption) (*GroupDeleteGroup, error)
	List(ctx context.Context, in *GroupTreeRequest, opts ...client.CallOption) (*GroupTreeResponse, error)
	Roles(ctx context.Context, in *GroupRolesRequest, opts ...client.CallOption) (*GroupRolesResponse, error)
	GrantRoles(ctx context.Context, in *GroupGrantRolesRequest, opts ...client.CallOption) (*GroupGrantRolesResponse, error)
}

type groupService struct {
	c    client.Client
	name string
}

func NewGroupService(name string, c client.Client) GroupService {
	return &groupService{
		c:    c,
		name: name,
	}
}

func (c *groupService) Create(ctx context.Context, in *GroupCreateRequest, opts ...client.CallOption) (*GroupCreateResponse, error) {
	req := c.c.NewRequest(c.name, "GroupService.Create", in)
	out := new(GroupCreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupService) Read(ctx context.Context, in *GroupReadRequest, opts ...client.CallOption) (*GroupReadResponse, error) {
	req := c.c.NewRequest(c.name, "GroupService.Read", in)
	out := new(GroupReadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupService) Update(ctx context.Context, in *GroupUpdateRequest, opts ...client.CallOption) (*GroupUpdateResponse, error) {
	req := c.c.NewRequest(c.name, "GroupService.Update", in)
	out := new(GroupUpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupService) Delete(ctx context.Context, in *GroupDeleteRequest, opts ...client.CallOption) (*GroupDeleteGroup, error) {
	req := c.c.NewRequest(c.name, "GroupService.Delete", in)
	out := new(GroupDeleteGroup)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupService) List(ctx context.Context, in *GroupTreeRequest, opts ...client.CallOption) (*GroupTreeResponse, error) {
	req := c.c.NewRequest(c.name, "GroupService.List", in)
	out := new(GroupTreeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupService) Roles(ctx context.Context, in *GroupRolesRequest, opts ...client.CallOption) (*GroupRolesResponse, error) {
	req := c.c.NewRequest(c.name, "GroupService.Roles", in)
	out := new(GroupRolesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupService) GrantRoles(ctx context.Context, in *GroupGrantRolesRequest, opts ...client.CallOption) (*GroupGrantRolesResponse, error) {
	req := c.c.NewRequest(c.name, "GroupService.GrantRoles", in)
	out := new(GroupGrantRolesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GroupService service

type GroupServiceHandler interface {
	Create(context.Context, *GroupCreateRequest, *GroupCreateResponse) error
	Read(context.Context, *GroupReadRequest, *GroupReadResponse) error
	Update(context.Context, *GroupUpdateRequest, *GroupUpdateResponse) error
	Delete(context.Context, *GroupDeleteRequest, *GroupDeleteGroup) error
	List(context.Context, *GroupTreeRequest, *GroupTreeResponse) error
	Roles(context.Context, *GroupRolesRequest, *GroupRolesResponse) error
	GrantRoles(context.Context, *GroupGrantRolesRequest, *GroupGrantRolesResponse) error
}

func MicroRegisterGroupServiceHandler(s server.Server, hdlr GroupServiceHandler, opts ...server.HandlerOption) error {
	type groupService interface {
		Create(ctx context.Context, in *GroupCreateRequest, out *GroupCreateResponse) error
		Read(ctx context.Context, in *GroupReadRequest, out *GroupReadResponse) error
		Update(ctx context.Context, in *GroupUpdateRequest, out *GroupUpdateResponse) error
		Delete(ctx context.Context, in *GroupDeleteRequest, out *GroupDeleteGroup) error
		List(ctx context.Context, in *GroupTreeRequest, out *GroupTreeResponse) error
		Roles(ctx context.Context, in *GroupRolesRequest, out *GroupRolesResponse) error
		GrantRoles(ctx context.Context, in *GroupGrantRolesRequest, out *GroupGrantRolesResponse) error
	}
	type GroupService struct {
		groupService
	}
	h := &groupServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "GroupService.Create",
		Path:    []string{"/identity/group"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "GroupService.Read",
		Path:    []string{"/identity/group/{id}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "GroupService.Update",
		Path:    []string{"/identity/group/{id}"},
		Method:  []string{"PUT"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "GroupService.Delete",
		Path:    []string{"/identity/group/{id}"},
		Method:  []string{"DELETE"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "GroupService.List",
		Path:    []string{"/identity/group:tree"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "GroupService.Roles",
		Path:    []string{"/identity/group/{id}/roles"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "GroupService.GrantRoles",
		Path:    []string{"/identity/group/{id}/roles"},
		Method:  []string{"POST"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&GroupService{h}, opts...))
}

type groupServiceHandler struct {
	GroupServiceHandler
}

func (h *groupServiceHandler) Create(ctx context.Context, in *GroupCreateRequest, out *GroupCreateResponse) error {
	return h.GroupServiceHandler.Create(ctx, in, out)
}

func (h *groupServiceHandler) Read(ctx context.Context, in *GroupReadRequest, out *GroupReadResponse) error {
	return h.GroupServiceHandler.Read(ctx, in, out)
}

func (h *groupServiceHandler) Update(ctx context.Context, in *GroupUpdateRequest, out *GroupUpdateResponse) error {
	return h.GroupServiceHandler.Update(ctx, in, out)
}

func (h *groupServiceHandler) Delete(ctx context.Context, in *GroupDeleteRequest, out *GroupDeleteGroup) error {
	return h.GroupServiceHandler.Delete(ctx, in, out)
}

func (h *groupServiceHandler) List(ctx context.Context, in *GroupTreeRequest, out *GroupTreeResponse) error {
	return h.GroupServiceHandler.List(ctx, in, out)
}

func (h *groupServiceHandler) Roles(ctx context.Context, in *GroupRolesRequest, out *GroupRolesResponse) error {
	return h.GroupServiceHandler.Roles(ctx, in, out)
}

func (h *groupServiceHandler) GrantRoles(ctx context.Context, in *GroupGrantRolesRequest, out *GroupGrantRolesResponse) error {
	return h.GroupServiceHandler.GrantRoles(ctx, in, out)
}
