// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: identity/permission.proto

package identity

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PermissionService_Create_FullMethodName             = "/identity.PermissionService/Create"
	PermissionService_Read_FullMethodName               = "/identity.PermissionService/Read"
	PermissionService_Update_FullMethodName             = "/identity.PermissionService/Update"
	PermissionService_Delete_FullMethodName             = "/identity.PermissionService/Delete"
	PermissionService_List_FullMethodName               = "/identity.PermissionService/List"
	PermissionService_PageResources_FullMethodName      = "/identity.PermissionService/PageResources"
	PermissionService_GrantPageResources_FullMethodName = "/identity.PermissionService/GrantPageResources"
	PermissionService_DeletePageResource_FullMethodName = "/identity.PermissionService/DeletePageResource"
	PermissionService_ApiResources_FullMethodName       = "/identity.PermissionService/ApiResources"
	PermissionService_GrantApiResources_FullMethodName  = "/identity.PermissionService/GrantApiResources"
	PermissionService_DeleteApiResource_FullMethodName  = "/identity.PermissionService/DeleteApiResource"
	PermissionService_MenuResources_FullMethodName      = "/identity.PermissionService/MenuResources"
	PermissionService_GrantMenuResource_FullMethodName  = "/identity.PermissionService/GrantMenuResource"
	PermissionService_DeleteMenuResource_FullMethodName = "/identity.PermissionService/DeleteMenuResource"
)

// PermissionServiceClient is the client API for PermissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PermissionServiceClient interface {
	Create(ctx context.Context, in *PermCreateRequest, opts ...grpc.CallOption) (*PermCreateResponse, error)
	Read(ctx context.Context, in *PermReadRequest, opts ...grpc.CallOption) (*PermReadResponse, error)
	Update(ctx context.Context, in *PermUpdateRequest, opts ...grpc.CallOption) (*PermUpdateResponse, error)
	Delete(ctx context.Context, in *PermDeleteRequest, opts ...grpc.CallOption) (*PermDeleteResponse, error)
	List(ctx context.Context, in *PermListRequest, opts ...grpc.CallOption) (*PermListResponse, error)
	// the page resources, `readonly` properties are indirect dependent on
	PageResources(ctx context.Context, in *PermPageResourceRequest, opts ...grpc.CallOption) (*PermPageResourceResponse, error)
	GrantPageResources(ctx context.Context, in *PermGrantPageResourceRequest, opts ...grpc.CallOption) (*PermGrantPageResourceResponse, error)
	DeletePageResource(ctx context.Context, in *PermDeletePageResourceRequest, opts ...grpc.CallOption) (*PermDeletePageResourceResponse, error)
	// the api resources, `readonly` properties are indirect dependent on
	ApiResources(ctx context.Context, in *PermApiResourceRequest, opts ...grpc.CallOption) (*PermApiResourceResponse, error)
	GrantApiResources(ctx context.Context, in *PermGrantApiResourceRequest, opts ...grpc.CallOption) (*PermGrantApiResourceResponse, error)
	DeleteApiResource(ctx context.Context, in *PermDeleteApiResourceRequest, opts ...grpc.CallOption) (*PermDeleteApiResourceResponse, error)
	MenuResources(ctx context.Context, in *PermMenuResourceRequest, opts ...grpc.CallOption) (*PermMenuResourceRequest, error)
	GrantMenuResource(ctx context.Context, in *PermGrantMenuResourceRequest, opts ...grpc.CallOption) (*PermGrantMenuResourceResponse, error)
	DeleteMenuResource(ctx context.Context, in *PermDeleteMenuResourceRequest, opts ...grpc.CallOption) (*PermDeleteMenuResourceResponse, error)
}

type permissionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPermissionServiceClient(cc grpc.ClientConnInterface) PermissionServiceClient {
	return &permissionServiceClient{cc}
}

func (c *permissionServiceClient) Create(ctx context.Context, in *PermCreateRequest, opts ...grpc.CallOption) (*PermCreateResponse, error) {
	out := new(PermCreateResponse)
	err := c.cc.Invoke(ctx, PermissionService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) Read(ctx context.Context, in *PermReadRequest, opts ...grpc.CallOption) (*PermReadResponse, error) {
	out := new(PermReadResponse)
	err := c.cc.Invoke(ctx, PermissionService_Read_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) Update(ctx context.Context, in *PermUpdateRequest, opts ...grpc.CallOption) (*PermUpdateResponse, error) {
	out := new(PermUpdateResponse)
	err := c.cc.Invoke(ctx, PermissionService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) Delete(ctx context.Context, in *PermDeleteRequest, opts ...grpc.CallOption) (*PermDeleteResponse, error) {
	out := new(PermDeleteResponse)
	err := c.cc.Invoke(ctx, PermissionService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) List(ctx context.Context, in *PermListRequest, opts ...grpc.CallOption) (*PermListResponse, error) {
	out := new(PermListResponse)
	err := c.cc.Invoke(ctx, PermissionService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) PageResources(ctx context.Context, in *PermPageResourceRequest, opts ...grpc.CallOption) (*PermPageResourceResponse, error) {
	out := new(PermPageResourceResponse)
	err := c.cc.Invoke(ctx, PermissionService_PageResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) GrantPageResources(ctx context.Context, in *PermGrantPageResourceRequest, opts ...grpc.CallOption) (*PermGrantPageResourceResponse, error) {
	out := new(PermGrantPageResourceResponse)
	err := c.cc.Invoke(ctx, PermissionService_GrantPageResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) DeletePageResource(ctx context.Context, in *PermDeletePageResourceRequest, opts ...grpc.CallOption) (*PermDeletePageResourceResponse, error) {
	out := new(PermDeletePageResourceResponse)
	err := c.cc.Invoke(ctx, PermissionService_DeletePageResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) ApiResources(ctx context.Context, in *PermApiResourceRequest, opts ...grpc.CallOption) (*PermApiResourceResponse, error) {
	out := new(PermApiResourceResponse)
	err := c.cc.Invoke(ctx, PermissionService_ApiResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) GrantApiResources(ctx context.Context, in *PermGrantApiResourceRequest, opts ...grpc.CallOption) (*PermGrantApiResourceResponse, error) {
	out := new(PermGrantApiResourceResponse)
	err := c.cc.Invoke(ctx, PermissionService_GrantApiResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) DeleteApiResource(ctx context.Context, in *PermDeleteApiResourceRequest, opts ...grpc.CallOption) (*PermDeleteApiResourceResponse, error) {
	out := new(PermDeleteApiResourceResponse)
	err := c.cc.Invoke(ctx, PermissionService_DeleteApiResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) MenuResources(ctx context.Context, in *PermMenuResourceRequest, opts ...grpc.CallOption) (*PermMenuResourceRequest, error) {
	out := new(PermMenuResourceRequest)
	err := c.cc.Invoke(ctx, PermissionService_MenuResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) GrantMenuResource(ctx context.Context, in *PermGrantMenuResourceRequest, opts ...grpc.CallOption) (*PermGrantMenuResourceResponse, error) {
	out := new(PermGrantMenuResourceResponse)
	err := c.cc.Invoke(ctx, PermissionService_GrantMenuResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) DeleteMenuResource(ctx context.Context, in *PermDeleteMenuResourceRequest, opts ...grpc.CallOption) (*PermDeleteMenuResourceResponse, error) {
	out := new(PermDeleteMenuResourceResponse)
	err := c.cc.Invoke(ctx, PermissionService_DeleteMenuResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermissionServiceServer is the server API for PermissionService service.
// All implementations must embed UnimplementedPermissionServiceServer
// for forward compatibility
type PermissionServiceServer interface {
	Create(context.Context, *PermCreateRequest) (*PermCreateResponse, error)
	Read(context.Context, *PermReadRequest) (*PermReadResponse, error)
	Update(context.Context, *PermUpdateRequest) (*PermUpdateResponse, error)
	Delete(context.Context, *PermDeleteRequest) (*PermDeleteResponse, error)
	List(context.Context, *PermListRequest) (*PermListResponse, error)
	// the page resources, `readonly` properties are indirect dependent on
	PageResources(context.Context, *PermPageResourceRequest) (*PermPageResourceResponse, error)
	GrantPageResources(context.Context, *PermGrantPageResourceRequest) (*PermGrantPageResourceResponse, error)
	DeletePageResource(context.Context, *PermDeletePageResourceRequest) (*PermDeletePageResourceResponse, error)
	// the api resources, `readonly` properties are indirect dependent on
	ApiResources(context.Context, *PermApiResourceRequest) (*PermApiResourceResponse, error)
	GrantApiResources(context.Context, *PermGrantApiResourceRequest) (*PermGrantApiResourceResponse, error)
	DeleteApiResource(context.Context, *PermDeleteApiResourceRequest) (*PermDeleteApiResourceResponse, error)
	MenuResources(context.Context, *PermMenuResourceRequest) (*PermMenuResourceRequest, error)
	GrantMenuResource(context.Context, *PermGrantMenuResourceRequest) (*PermGrantMenuResourceResponse, error)
	DeleteMenuResource(context.Context, *PermDeleteMenuResourceRequest) (*PermDeleteMenuResourceResponse, error)
	mustEmbedUnimplementedPermissionServiceServer()
}

// UnimplementedPermissionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPermissionServiceServer struct {
}

func (UnimplementedPermissionServiceServer) Create(context.Context, *PermCreateRequest) (*PermCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPermissionServiceServer) Read(context.Context, *PermReadRequest) (*PermReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedPermissionServiceServer) Update(context.Context, *PermUpdateRequest) (*PermUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPermissionServiceServer) Delete(context.Context, *PermDeleteRequest) (*PermDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPermissionServiceServer) List(context.Context, *PermListRequest) (*PermListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPermissionServiceServer) PageResources(context.Context, *PermPageResourceRequest) (*PermPageResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageResources not implemented")
}
func (UnimplementedPermissionServiceServer) GrantPageResources(context.Context, *PermGrantPageResourceRequest) (*PermGrantPageResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantPageResources not implemented")
}
func (UnimplementedPermissionServiceServer) DeletePageResource(context.Context, *PermDeletePageResourceRequest) (*PermDeletePageResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePageResource not implemented")
}
func (UnimplementedPermissionServiceServer) ApiResources(context.Context, *PermApiResourceRequest) (*PermApiResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiResources not implemented")
}
func (UnimplementedPermissionServiceServer) GrantApiResources(context.Context, *PermGrantApiResourceRequest) (*PermGrantApiResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantApiResources not implemented")
}
func (UnimplementedPermissionServiceServer) DeleteApiResource(context.Context, *PermDeleteApiResourceRequest) (*PermDeleteApiResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApiResource not implemented")
}
func (UnimplementedPermissionServiceServer) MenuResources(context.Context, *PermMenuResourceRequest) (*PermMenuResourceRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuResources not implemented")
}
func (UnimplementedPermissionServiceServer) GrantMenuResource(context.Context, *PermGrantMenuResourceRequest) (*PermGrantMenuResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantMenuResource not implemented")
}
func (UnimplementedPermissionServiceServer) DeleteMenuResource(context.Context, *PermDeleteMenuResourceRequest) (*PermDeleteMenuResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenuResource not implemented")
}
func (UnimplementedPermissionServiceServer) mustEmbedUnimplementedPermissionServiceServer() {}

// UnsafePermissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermissionServiceServer will
// result in compilation errors.
type UnsafePermissionServiceServer interface {
	mustEmbedUnimplementedPermissionServiceServer()
}

func RegisterPermissionServiceServer(s grpc.ServiceRegistrar, srv PermissionServiceServer) {
	s.RegisterService(&PermissionService_ServiceDesc, srv)
}

func _PermissionService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).Create(ctx, req.(*PermCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionService_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).Read(ctx, req.(*PermReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).Update(ctx, req.(*PermUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).Delete(ctx, req.(*PermDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).List(ctx, req.(*PermListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_PageResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermPageResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).PageResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionService_PageResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).PageResources(ctx, req.(*PermPageResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_GrantPageResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermGrantPageResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).GrantPageResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionService_GrantPageResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).GrantPageResources(ctx, req.(*PermGrantPageResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_DeletePageResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermDeletePageResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).DeletePageResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionService_DeletePageResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).DeletePageResource(ctx, req.(*PermDeletePageResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_ApiResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermApiResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).ApiResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionService_ApiResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).ApiResources(ctx, req.(*PermApiResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_GrantApiResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermGrantApiResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).GrantApiResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionService_GrantApiResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).GrantApiResources(ctx, req.(*PermGrantApiResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_DeleteApiResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermDeleteApiResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).DeleteApiResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionService_DeleteApiResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).DeleteApiResource(ctx, req.(*PermDeleteApiResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_MenuResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermMenuResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).MenuResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionService_MenuResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).MenuResources(ctx, req.(*PermMenuResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_GrantMenuResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermGrantMenuResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).GrantMenuResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionService_GrantMenuResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).GrantMenuResource(ctx, req.(*PermGrantMenuResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_DeleteMenuResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermDeleteMenuResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).DeleteMenuResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionService_DeleteMenuResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).DeleteMenuResource(ctx, req.(*PermDeleteMenuResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PermissionService_ServiceDesc is the grpc.ServiceDesc for PermissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PermissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "identity.PermissionService",
	HandlerType: (*PermissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PermissionService_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _PermissionService_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PermissionService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PermissionService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PermissionService_List_Handler,
		},
		{
			MethodName: "PageResources",
			Handler:    _PermissionService_PageResources_Handler,
		},
		{
			MethodName: "GrantPageResources",
			Handler:    _PermissionService_GrantPageResources_Handler,
		},
		{
			MethodName: "DeletePageResource",
			Handler:    _PermissionService_DeletePageResource_Handler,
		},
		{
			MethodName: "ApiResources",
			Handler:    _PermissionService_ApiResources_Handler,
		},
		{
			MethodName: "GrantApiResources",
			Handler:    _PermissionService_GrantApiResources_Handler,
		},
		{
			MethodName: "DeleteApiResource",
			Handler:    _PermissionService_DeleteApiResource_Handler,
		},
		{
			MethodName: "MenuResources",
			Handler:    _PermissionService_MenuResources_Handler,
		},
		{
			MethodName: "GrantMenuResource",
			Handler:    _PermissionService_GrantMenuResource_Handler,
		},
		{
			MethodName: "DeleteMenuResource",
			Handler:    _PermissionService_DeleteMenuResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "identity/permission.proto",
}
