// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: identity/app.proto

package identity

import (
	fmt "fmt"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AppService service

func NewAppServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "AppService.PageResources",
			Path:    []string{"/identity/app/page/resources"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "AppService.ApiResources",
			Path:    []string{"/identity/app/api/resources"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
	}
}

// Client API for AppService service

type AppService interface {
	Register(ctx context.Context, opts ...client.CallOption) (AppService_RegisterService, error)
	PageResources(ctx context.Context, in *AppPageResourceRequest, opts ...client.CallOption) (*AppPageResourceResponse, error)
	ApiResources(ctx context.Context, in *AppApiResourceRequest, opts ...client.CallOption) (*AppApiResourceResponse, error)
}

type appService struct {
	c    client.Client
	name string
}

func NewAppService(name string, c client.Client) AppService {
	return &appService{
		c:    c,
		name: name,
	}
}

func (c *appService) Register(ctx context.Context, opts ...client.CallOption) (AppService_RegisterService, error) {
	req := c.c.NewRequest(c.name, "AppService.Register", &AppRegisterRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &appServiceRegister{stream}, nil
}

type AppService_RegisterService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Send(*AppRegisterRequest) error
	Recv() (*AppRegisterResponse, error)
}

type appServiceRegister struct {
	stream client.Stream
}

func (x *appServiceRegister) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *appServiceRegister) Close() error {
	return x.stream.Close()
}

func (x *appServiceRegister) Context() context.Context {
	return x.stream.Context()
}

func (x *appServiceRegister) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *appServiceRegister) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *appServiceRegister) Send(m *AppRegisterRequest) error {
	return x.stream.Send(m)
}

func (x *appServiceRegister) Recv() (*AppRegisterResponse, error) {
	m := new(AppRegisterResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *appService) PageResources(ctx context.Context, in *AppPageResourceRequest, opts ...client.CallOption) (*AppPageResourceResponse, error) {
	req := c.c.NewRequest(c.name, "AppService.PageResources", in)
	out := new(AppPageResourceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appService) ApiResources(ctx context.Context, in *AppApiResourceRequest, opts ...client.CallOption) (*AppApiResourceResponse, error) {
	req := c.c.NewRequest(c.name, "AppService.ApiResources", in)
	out := new(AppApiResourceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AppService service

type AppServiceHandler interface {
	Register(context.Context, AppService_RegisterStream) error
	PageResources(context.Context, *AppPageResourceRequest, *AppPageResourceResponse) error
	ApiResources(context.Context, *AppApiResourceRequest, *AppApiResourceResponse) error
}

func MicroRegisterAppServiceHandler(s server.Server, hdlr AppServiceHandler, opts ...server.HandlerOption) error {
	type appService interface {
		Register(ctx context.Context, stream server.Stream) error
		PageResources(ctx context.Context, in *AppPageResourceRequest, out *AppPageResourceResponse) error
		ApiResources(ctx context.Context, in *AppApiResourceRequest, out *AppApiResourceResponse) error
	}
	type AppService struct {
		appService
	}
	h := &appServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "AppService.PageResources",
		Path:    []string{"/identity/app/page/resources"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "AppService.ApiResources",
		Path:    []string{"/identity/app/api/resources"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&AppService{h}, opts...))
}

type appServiceHandler struct {
	AppServiceHandler
}

func (h *appServiceHandler) Register(ctx context.Context, stream server.Stream) error {
	return h.AppServiceHandler.Register(ctx, &appServiceRegisterStream{stream})
}

type AppService_RegisterStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*AppRegisterResponse) error
	Recv() (*AppRegisterRequest, error)
}

type appServiceRegisterStream struct {
	stream server.Stream
}

func (x *appServiceRegisterStream) Close() error {
	return x.stream.Close()
}

func (x *appServiceRegisterStream) Context() context.Context {
	return x.stream.Context()
}

func (x *appServiceRegisterStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *appServiceRegisterStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *appServiceRegisterStream) Send(m *AppRegisterResponse) error {
	return x.stream.Send(m)
}

func (x *appServiceRegisterStream) Recv() (*AppRegisterRequest, error) {
	m := new(AppRegisterRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *appServiceHandler) PageResources(ctx context.Context, in *AppPageResourceRequest, out *AppPageResourceResponse) error {
	return h.AppServiceHandler.PageResources(ctx, in, out)
}

func (h *appServiceHandler) ApiResources(ctx context.Context, in *AppApiResourceRequest, out *AppApiResourceResponse) error {
	return h.AppServiceHandler.ApiResources(ctx, in, out)
}
