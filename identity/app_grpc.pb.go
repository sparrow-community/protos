// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: identity/app.proto

package identity

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AppService_Register_FullMethodName      = "/identity.AppService/Register"
	AppService_PageResources_FullMethodName = "/identity.AppService/PageResources"
	AppService_ApiResources_FullMethodName  = "/identity.AppService/ApiResources"
)

// AppServiceClient is the client API for AppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppServiceClient interface {
	Register(ctx context.Context, opts ...grpc.CallOption) (AppService_RegisterClient, error)
	PageResources(ctx context.Context, in *AppPageResourceRequest, opts ...grpc.CallOption) (*AppPageResourceResponse, error)
	ApiResources(ctx context.Context, in *AppApiResourceRequest, opts ...grpc.CallOption) (*AppApiResourceResponse, error)
}

type appServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppServiceClient(cc grpc.ClientConnInterface) AppServiceClient {
	return &appServiceClient{cc}
}

func (c *appServiceClient) Register(ctx context.Context, opts ...grpc.CallOption) (AppService_RegisterClient, error) {
	stream, err := c.cc.NewStream(ctx, &AppService_ServiceDesc.Streams[0], AppService_Register_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &appServiceRegisterClient{stream}
	return x, nil
}

type AppService_RegisterClient interface {
	Send(*AppRegisterRequest) error
	Recv() (*AppRegisterResponse, error)
	grpc.ClientStream
}

type appServiceRegisterClient struct {
	grpc.ClientStream
}

func (x *appServiceRegisterClient) Send(m *AppRegisterRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *appServiceRegisterClient) Recv() (*AppRegisterResponse, error) {
	m := new(AppRegisterResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *appServiceClient) PageResources(ctx context.Context, in *AppPageResourceRequest, opts ...grpc.CallOption) (*AppPageResourceResponse, error) {
	out := new(AppPageResourceResponse)
	err := c.cc.Invoke(ctx, AppService_PageResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) ApiResources(ctx context.Context, in *AppApiResourceRequest, opts ...grpc.CallOption) (*AppApiResourceResponse, error) {
	out := new(AppApiResourceResponse)
	err := c.cc.Invoke(ctx, AppService_ApiResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppServiceServer is the server API for AppService service.
// All implementations must embed UnimplementedAppServiceServer
// for forward compatibility
type AppServiceServer interface {
	Register(AppService_RegisterServer) error
	PageResources(context.Context, *AppPageResourceRequest) (*AppPageResourceResponse, error)
	ApiResources(context.Context, *AppApiResourceRequest) (*AppApiResourceResponse, error)
	mustEmbedUnimplementedAppServiceServer()
}

// UnimplementedAppServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAppServiceServer struct {
}

func (UnimplementedAppServiceServer) Register(AppService_RegisterServer) error {
	return status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAppServiceServer) PageResources(context.Context, *AppPageResourceRequest) (*AppPageResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageResources not implemented")
}
func (UnimplementedAppServiceServer) ApiResources(context.Context, *AppApiResourceRequest) (*AppApiResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiResources not implemented")
}
func (UnimplementedAppServiceServer) mustEmbedUnimplementedAppServiceServer() {}

// UnsafeAppServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppServiceServer will
// result in compilation errors.
type UnsafeAppServiceServer interface {
	mustEmbedUnimplementedAppServiceServer()
}

func RegisterAppServiceServer(s grpc.ServiceRegistrar, srv AppServiceServer) {
	s.RegisterService(&AppService_ServiceDesc, srv)
}

func _AppService_Register_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AppServiceServer).Register(&appServiceRegisterServer{stream})
}

type AppService_RegisterServer interface {
	Send(*AppRegisterResponse) error
	Recv() (*AppRegisterRequest, error)
	grpc.ServerStream
}

type appServiceRegisterServer struct {
	grpc.ServerStream
}

func (x *appServiceRegisterServer) Send(m *AppRegisterResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *appServiceRegisterServer) Recv() (*AppRegisterRequest, error) {
	m := new(AppRegisterRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AppService_PageResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppPageResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).PageResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_PageResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).PageResources(ctx, req.(*AppPageResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_ApiResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppApiResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).ApiResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_ApiResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).ApiResources(ctx, req.(*AppApiResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppService_ServiceDesc is the grpc.ServiceDesc for AppService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "identity.AppService",
	HandlerType: (*AppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PageResources",
			Handler:    _AppService_PageResources_Handler,
		},
		{
			MethodName: "ApiResources",
			Handler:    _AppService_ApiResources_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Register",
			Handler:       _AppService_Register_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "identity/app.proto",
}
